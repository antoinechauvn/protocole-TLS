--------------------------------------------------------
                          TLS 1.3
--------------------------------------------------------

-Authentication:
+The server side of the channel is always authenticated;
+the client side is optionally authenticated.
+Authentication can happen via asymmetric cryptography (e.g., RSA
+[RSA], the Elliptic Curve Digital Signature Algorithm (ECDSA)
+[ECDSA], or the Edwards-Curve Digital Signature Algorithm (EdDSA)
+[RFC8032]) or a symmetric pre-shared key (PSK).

TLS consists of two primary components:

- A handshake protocol
+authenticates the communicating parties, negotiates cryptographic modes and
+parameters, and establishes shared keying material. The handshake
+protocol is designed to resist tampering; an active attacker
+should not be able to force the peers to negotiate different
+parameters than they would if the connection were not under attack.

- A record protocol
+uses the parameters established by the handshake protocol
+to protect traffic between the communicating peers.
+The record protocol divides traffic up into a series of records
+each of which is independently protected using the traffic keys.

------------------------------
Major Differences from TLS 1.2
------------------------------
The following is a list of the major functional differences between
TLS 1.2 and TLS 1.3. It is not intended to be exhaustive, and there
are many minor differences.

-TLS supports three basic key exchange modes:
+(EC)DHE (Diffie-Hellman over either finite fields or elliptic curves)
+PSK-only
+PSK with (EC)DHE

-The list of supported symmetric encryption algorithms has been pruned of all algorithms that are considered legacy.
+Those that remain are all Authenticated Encryption with Associated Data (AEAD) algorithms.
+The cipher suite concept has been changed to separate the authentication
+and key exchange mechanisms from the record protection algorithm (including secret key length)
+and a hash to be used with both the key derivation function and handshake message authentication code (MAC).

-A zero round-trip time (0-RTT) mode was added
+saving a round trip at connection setup for some application data, at the cost of certain security properties.
+allows a recently used connection to be resumed without renegotiating the encryption.
+Thus, on the very first connection from a client to the server, there is full negotiation. The client then keeps a cached message, Server Config (SCFG). 
+All subsequent connections will use it to obtain derived keys and thus immediately start exchanging data.

-Static RSA and Diffie-Hellman cipher suites have been removed
+all public-key based key exchange mechanisms now provide forward secrecy.

-All handshake messages after the ServerHello are now encrypted.
+The newly introduced EncryptedExtensions message allows various
+extensions previously sent in the clear in the ServerHello to also enjoy confidentiality protection.

-The key derivation functions have been redesigned.
+The new design allows easier analysis by cryptographers due to their improved key separation properties.
+The HMAC-based Extract-and-Expand Key Derivation Function (HKDF) is used as an underlying primitive.

-The handshake state machine has been significantly restructured
+more consistense and remove superfluous messages such as ChangeCipherSpec (except when needed for middlebox compatibility).

-Elliptic curve algorithms are now in the base spec, and new signature algorithms, such as EdDSA, are included. 
+TLS 1.3 removed point format negotiation in favor of a single point format for each curve.

-Other cryptographic improvements were made
+including changing the RSA padding to use the RSA Probabilistic Signature Scheme (RSASSA-PSS)
+removal of compression
+the Digital Signature Algorithm (DSA)
+and custom Ephemeral Diffie-Hellman (DHE) groups.

-The TLS 1.2 version negotiation mechanism has been deprecated in favor of a version list in an extension.
+This increases compatibility with existing servers that incorrectly implemented version negotiation.

-Session resumption with and without server-side state
+the PSK-based cipher suites of earlier TLS versions have been replaced by a single new PSK exchange.

--------------------------------------------------------
                    TLS 1.3 SCHEMA
--------------------------------------------------------

                Client                                  Server
Key     ^ ClientHello
Exch    | + key_share*
        | + signature_algorithms*
        | + psk_key_exchange_modes*
        v + pre_shared_key* -------->
                                            ServerHello             ^ Key
                                            + key_share*            | Exch
                                            + pre_shared_key*       v
                                            {EncryptedExtensions}   ^ Server
                                            {CertificateRequest*}   v Params
                                            {Certificate*}          ^
                                            {CertificateVerify*}    | Auth
                                            {Finished}              v
                                <--------   [Application Data*]
        ^ {Certificate*}
Auth    | {CertificateVerify*}
        v {Finished} -------->
          [Application Data]    <------->   [Application Data]

+ Indicates noteworthy extensions sent in the
previously noted message.

* Indicates optional or situation-dependent
messages/extensions that are not always sent.

{} Indicates messages protected using keys
derived from a [sender]_handshake_traffic_secret.

[] Indicates messages protected using keys
derived from [sender]_application_traffic_secret_N.


-The handshake can be thought of as having three phases (indicated in the diagram above):
--Key Exchange: 
++Establish shared keying material and select the
++cryptographic parameters.
++Everything after this phase is encrypted.

--Server Parameters: 
++Establish other handshake parameters
++(whether the client is authenticated, application-layer protocol support, etc.).

--Authentication: 
++Authenticate the server (and, optionally, the client) and provide key confirmation and handshake integrity.
++In the Key Exchange phase, the client sends the ClientHello message, which contains a random nonce (ClientHello.random);
++its offered protocol versions; a list of symmetric cipher/HKDF hash pairs;
++either a set of Diffie-Hellman key shares, a set of pre-shared key labels, or both;
++and potentially additional extensions.
++Additional fields and/or messages may also be present for middlebox compatibility.

++The server processes the ClientHello and determines the appropriate cryptographic parameters for the connection.
+It then responds with its own ServerHello, which indicates the negotiated connection parameters.
++The combination of the ClientHello and the ServerHello determines the shared keys.
++If (EC)DHE key establishment is in use, then the ServerHello contains a "key_share" extension with the server’s ephemeral Diffie-Hellman share;
++the server’s share MUST be in the same group as one of the client’s shares.
++If PSK key establishment is in use, then the ServerHello contains a "pre_shared_key" extension indicating which of the client’s offered PSKs was selected.
++Note that implementations can use (EC)DHE and PSK together, in which case both extensions will be supplied.

The server then sends two messages to establish the Server Parameters:

---EncryptedExtensions: 
++responses to ClientHello extensions that are not required to determine the cryptographic parameters
++other than those that are specific to individual certificates.

---CertificateRequest: 
++if certificate-based client authentication is desired, the desired parameters for that certificate. 
++This message is omitted if client authentication is not desired.

--Finally, the client and server exchange Authentication messages.
++TLS uses the same set of messages every time that certificate-based authentication is needed. (PSK-based authentication happens as aside effect of key exchange.)
++Specifically: 
++Certificate: The certificate of the endpoint and any per-certificate extensions.
++This message is omitted by the server if not authenticating with a certificate and by the client if the server did not send CertificateRequest
++(thus indicating that the client should not authenticate with a certificate).
++Note that if raw public keys or the cached information extension are in use, then this message will not contain a certificate but rather some other value corresponding to the server’s long-term key.

++CertificateVerify: A signature over the entire handshake using the private key corresponding to the public key in the Certificate message.
++This message is omitted if the endpoint is not authenticating via a certificate.

++Finished: A MAC (Message Authentication Code) over the entire handshake.
++This message provides key confirmation, binds the endpoint’s identity to the exchanged keys, and in PSK mode also authenticates the handshake.
++Upon receiving the server’s messages, the client responds with its Authentication messages, namely Certificate and CertificateVerify (if requested), and Finished.

++At this point, the handshake is complete, and the client and server derive the keying material required by the record layer to exchange application-layer data protected through authenticated encryption.
++Application Data MUST NOT be sent prior to sending the Finished message, except as specified in Section 2.3.
++Note that while the server may send Application Data prior to receiving the client’s Authentication messages, any data sent at that point is, of course, being sent to an unauthenticated peer.
